#ifndef ICN_MANAGER_H
#define ICN_MANAGER_H

#include "ns3/type-name.h"
#include <c++/4.8/unordered_map>
#include <stdint.h>
#include <iostream>
#include <string>
#include <vector>
#include <utility>
#include <boost/unordered_map.hpp>
#include "oicn-server-application.h"
#include "ns3/node.h"
#include "ns3/ptr.h"
//#include <boost/bimap.hpp>
//#include <boost/bimap/unordered_multiset_of.hpp>
//#include <boost/bimap/container_adaptor/unordered_multiset_adaptor.hpp>
//#include <boost/bimap/bimap.hpp>
//#include <boost/bimap/detail/bimap_core.hpp>
//#include <boost/bimap/unordered_set_of.hpp>

namespace ns3{
//namespace oicn{

template< class MapType >
void print_map(const MapType & m)
{
typedef typename MapType::const_iterator const_iterator;
for( const_iterator iter = m.begin(), iend = m.end(); iter != iend; ++iter )
{
	std::cout <<"   "<<iter->first << "-->" << iter->second << std::endl;
}
}

typedef boost::unordered_multimap<std::string, uint32_t> RTable;
typedef boost::unordered_multimap<std::string, Ptr<OICNServer>> STable;
typedef RTable::const_iterator riterator;
typedef STable::const_iterator siterator;
//typedef NodeTable::const_iterator Iterator;

class ICNManager
{
public:

	static RTable CreateRMap (void);
	static STable CreateSMap (void);
	//static void SetNodeTableEntry (uint32_t Address, uint32_t NodeId);
	static void SetServerTableEntry (Ptr<OICNServer> server, std::string Name);
	static void SetRouterTableEntry (Ptr<Node> Node, std::string Name);
	static void EvictRouterTableEntry (Ptr<Node> Node, std::string Name);
	static void GetContent (std::string Name, uint32_t ClientAddress, uint16_t ClientPort);
	static Ptr<Node> GetNearestRouter (std::string Name, uint32_t ClientAddress);

private:


	static RTable router_table;
	static STable server_table;

};

//Table ICNManager::server_table(v1.begin(), v1.end());
//}
}
#endif


