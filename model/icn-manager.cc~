#include "ns3/type-name.h"
#include "ns3/node.h"
#include "ns3/node-list.h"
#include "ns3/ptr.h"
#include "oicn-client-application.h"
#include "icn-manager.h"
#include "ns3/log.h"
#include "cache-manager.h"
#include "oicn-server-application.h"
#include <c++/4.8/unordered_map>
#include <stdint.h>
#include <cstring>
#include <boost/unordered_map.hpp>
#include <string>
#include <utility>
#include <vector>

namespace ns3{
//namespace oicn{
NS_LOG_COMPONENT_DEFINE ("ICN-Manager");

RTable ICNManager::CreateRMap ()
{
	RTable t;
	std::string c = "oicn://content/initializer";
	std::pair<std::string, uint32_t> entry (c, (uint32_t)0);
	t.insert(entry);
	return (t);
}

STable ICNManager::CreateSMap ()
{
	STable t;
	std::string c = "oicn://content/initializer";
	std::pair<std::string, Ptr<OICNServer> > entry (c, NULL);
	t.insert(entry);
	return (t);
}
/*NodeTable ICNManager::CreateMap ()
{
	NodeTable n;
	n[(uint32_t)0] = (uint32_t)1;
	return (n);
}*/

STable ICNManager::server_table = CreateSMap();
RTable ICNManager::router_table = CreateRMap();
//NodeTable ICNManager::node_table = CreateMap();

/*void ICNManager::SetNodeTableEntry (uint32_t NodeId, uint32_t NodeId)
{
	node_table.insert({Address, NodeId});
}*/

void ICNManager::SetServerTableEntry (Ptr<OICNServer> server, std::string Name)
{
	std::pair<std::string, Ptr<OICNServer>> entry (Name, server);
	server_table.insert(entry);
	//print_map(server_table);
	//NS_LOG_DEBUG(" The nodeid and Name added to the table is "<< Node->GetId()<<" and "<< Name);
}

void ICNManager::SetRouterTableEntry (Ptr<Node> Node, std::string Name)
{
	std::pair<std::string, uint32_t> entry (Name, Node->GetId());
	router_table.insert(entry);
	//NS_LOG_INFO (" The Updated Router Table is ");
	//print_map(router_table);
}

void ICNManager::EvictRouterTableEntry (Ptr<Node> Node, std::string Name)
{
	std::pair<riterator, riterator> iterpair = router_table.equal_range(Name);
	for (riterator it = iterpair.first; it != iterpair.second; it++)
	{
		if (it->second == Node->GetId())
		{
			router_table.erase(it);
			break;
		}
	}
	//NS_LOG_INFO (" The Updated Router Table is \n");
	//print_map(router_table);
}

void ICNManager::GetContent (std::string Name, uint32_t ClientAddress, uint16_t ClientPort)
{
	riterator rit = router_table.find(Name);
	//NS_LOG_INFO (" Router Table is ");
    //print_map(router_table);
	if (rit == router_table.end())
	{
		siterator sit = server_table.find(Name);
		Ptr<OICNServer> app = sit->second;
		NS_LOG_DEBUG (" The ICN Manager has found the content in the Server at node "<<app->GetNode()->GetId());
	    app->ICNManagerRequest(ClientAddress, ClientPort, Name);
	}
	else
	{
		Ptr<Node> node = GetNearestRouter (Name, ClientAddress);
		NS_LOG_DEBUG (" The ICN Manager has found the content in the Router at node "<<node->GetId());
		Ptr<CacheManager> c = node->GetObject<CacheManager> ();
		c->ICNManagerRequest(ClientAddress, ClientPort, Name);
	}

}

Ptr<Node> ICNManager::GetNearestRouter (std::string Name, uint32_t ClientAddress)
{
	riterator rit = router_table.find(Name);
	return (NodeList::GetNode(rit->second));
}

//}
}
