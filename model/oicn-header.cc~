#include "oicn-header.h"
#include "ns3/type-name.h"
#include "ns3/type-id.h"
#include <stdint.h>
#include <string>

namespace ns3{
//namespace oicn{

TypeId OICNHeader::GetTypeId (void)
{
	
  static TypeId tid = TypeId ("ns3::oicn::OICNHeader")
    .SetParent<Header> ()
    .AddConstructor<OICNHeader> ();

  return tid;

}

OICNHeader::OICNHeader ()
  : m_name(),
    header_length(0),
    first4bytes(0)
{

}

OICNHeader::~OICNHeader ()
{

}

void OICNHeader::SetName(std::string name)
{
  m_name = (uint8_t)name;
  header_length = strlen(name) + 4;
}

void OICNHeader::SetName(uint8_t name)
{
  m_name = name;
  header_length = strlen((char)name) + 4;
}

inline std::string OICNHeader::GetName()
{
  return((char)m_name);
}

inline uint8_t OICNHeader::GetName()
{
  return(m_name);
}

void OICNHeader::SetFirst4Bytes(uint32_t header_length, bool reply, bool cachable)
{
  if (reply)
	{
	  if (cachable) first4bytes = cachable_start + header_length;
	  else first4bytes = non_cachable_start + header_length;
	}
 else first4bytes = request_start + header_length;
}

inline void SetNonCachable()
{
  SetFirst4Bytes(header_length, true, false);
}

inline void SetCachable()
{
  SetFirst4Bytes(header_length, true, true);
}

inline void SetRequest()
{
  SetFirst4Bytes(header_length, false, false);
}

void OICNHeader::Serialize (Buffer::Iterator start) const
{
  NS_LOG_INFO(" check ");
  NS_LOG_FUNCTION (this << &start);
  Buffer::Iterator i = start;
  i.WriteHton32(first4bytes);
  i.WriteU8(m_name, header_length);
}

uint32_t OICNHeader::Deserialize (Buffer::Iterator start)
{
  NS_LOG_INFO(" check ");
  NS_LOG_FUNCTION (this << &start);
  Buffer::Iterator i = start;
  uint8_t firstbyte = i.PeekU8();
  first4bytes = i.ReadNtohU32();
  if (int(firstbyte) >= 240) header_length = first4bytes - cachable_start;
  else if(int(firstbyte) >= 176) header_length = first4bytes - non_cachable_start;
  else if(int(firstbyte) >= 48) header_length = first4bytes - request_start;
  m_name = i.Read(i, (header_length-4));
  return GetSerializedSize ();
}

inline uint32_t OICNHeader::GetSerializedSize (void) const
{
  return(header_length);
}
//}// end of namespace oicn
}// end of namespace ns3
