#include "ns3/type-id.h"
#include "ns3/type-name.h"
#include "named-content-cache.h"
#include "ns3/ptr.h"
#include "ns3/packet.h"
#include "named-content-cache-entry.h"
#include <stdint.h>
#include <string>

namespace ns3{
namespace oicn{

TypeId NamedContentCache::GetTypeId (void)
{
	NS_LOG_INFO("check");//a
  static TypeId tid = TypeId ("ns3::oicn::NamedContentCache")
    .SetParent<Object> ()
    .AddConstructor<NamedContentCache> ();

  return tid;

}

NamedContentCache::NamedContentCache()
 : cache_size (20),
   host_address (0),
   cache (),
   policyindex ()
{

}

virtual NamedContentCache::~NamedContentCache()
{

}

inline void SetCacheSize(uint32_t size)
{
  cache_size = size;
}

inline void NamedContentCache::SetHostAddress (uint32_t HostAddress)
{
	host_address = HostAddress;
}

inline uint32_t NamedContentCache::GetHostAddress ()
{
	return (host_address);
}

inline void NamedContentCache::InsertToCache(Name, entry)
{
  cache.insert({Name, entry});
}

inline void NamedContentCache::InsertToPolicyIndex(index, Name)
{
  policyindex.insert({index, Name});
}

inline bool NamedContentCache::IsFull()
{
  if(cache.size()>=cache_size) return true;
  else return false;
}
     
Ptr<Packet> NamedContentCache::Find(Name)
{
  Cache::const_iterator hit = cache.find(Name);
  NamedContentCacheEntry entryhit = hit->second;
  Ptr<Packet> packet = Create<Packet> (entryhit.GetData(), strlen((char)entryhit.GetData()));
  UpdateIndex(Name);
  return(packet);
}
} // end of namespace oicn
} // end of namespace ns3
